"""
Django settings for kitsune project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from typing import Literal

from pydantic import AmqpDsn, RedisDsn, SecretStr, StrictBool, field_validator
from pydantic_settings import BaseSettings, SettingsConfigDict

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
ENV_FILE = BASE_DIR / ".env"
if not ENV_FILE.exists():
    raise OSError(f"File not found: {ENV_FILE}")

# ┌──────────────────────────────────────────────────────────┐
# │               Pydantic validated settings                │
# └──────────────────────────────────────────────────────────┘


class PydanticSettings(BaseSettings, case_sensitive=False):
    model_config = SettingsConfigDict(env_file=ENV_FILE)

    DJANGO_SECRET_KEY: SecretStr

    # Celery
    CELERY_BROKER_URL: AmqpDsn | RedisDsn
    CELERY_GLOBAL_PREFIX: str

    # APIs
    # Note: `SecretStr` only affect printing and logging, secrets are plain strings internally
    OPENAI_API_KEY: SecretStr

    # Optional settings, django
    DJANGO_DEBUG: StrictBool = False
    DJANGO_UNSAFE_DEV: StrictBool = False
    DJANGO_LOG_LEVEL: Literal["DEBUG", "INFO", "WARNING", "ERROR"] = "WARNING"
    KITSUNE_LOG_LEVEL: Literal["DEBUG", "INFO", "WARNING", "ERROR"] = "INFO"
    DB_DIR: Path = Path(__file__).resolve().parent.parent.parent / "db_mount"

    # Optional, others
    CELERY_WORKER_PREFETCH_MULTIPLIER: int = 4

    @field_validator("DJANGO_DEBUG", "DJANGO_UNSAFE_DEV", mode="before")
    @classmethod
    def to_strict_bool(cls, raw: bool) -> StrictBool:
        return bool(raw)

    @field_validator("DJANGO_LOG_LEVEL", "KITSUNE_LOG_LEVEL", mode="before")
    @classmethod
    def to_upper(cls, raw: str) -> str:
        return raw.upper()


p_env = PydanticSettings()  # type:ignore


# ┌──────────────────────────────────────────────────────────┐
# │                  Common Django configs                   │
# └──────────────────────────────────────────────────────────┘


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = p_env.DJANGO_SECRET_KEY.get_secret_value()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = p_env.DJANGO_UNSAFE_DEV

ALLOWED_HOSTS = ["kitsune.paulw.tokyo", "127.0.0.1", "localhost"]

CSRF_TRUSTED_ORIGINS = [
    "https://kitsune.paulw.tokyo",
]


# Needed for the form
# TODO: seems wrong, rtfm
# CORS_ALLOWED_ORIGINS = [
#     "https://kitsune.paulw.tokyo",
#     # "demo.paulw.tokyo",
# ]
#
#
# # Might not be needed?
# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_METHODS = [
#     "DELETE",
#     "GET",
#     "OPTIONS",
#     "PATCH",
#     "POST",
#     "PUT",
# ]
# CORS_ALLOW_HEADERS = [
#     "accept",
#     "accept-encoding",
#     "authorization",
#     "content-type",
#     "dnt",
#     "origin",
#     "user-agent",
#     "x-csrftoken",
#     "x-requested-with",
# ]


# Auth
# AUTH_USER_MODEL = "tasks.User"


# Application definition

INSTALLED_APPS = [
    # Own app
    "tasks.apps.TasksConfig",
    # Celery
    # use django ORM for results. Define a single model:
    # django_celery_results.models.TaskResult
    "django_celery_results",
    # monitor tasks in django admin interface
    "django_celery_beat",
    # "channels",
    # Defaults
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Required for the form to word once deployed
    # from: django-cors-headers
    # TODO: really needed?
    # "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Required for the form to word once deployed
    # Actually no?
    # "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "kitsune.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "kitsune.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        # Use on-disk db
        "NAME": str((p_env.DB_DIR / "db.sqlite3").absolute()),
        # Keep persistent connextions to the db, instead of starting it on each request. This isn't
        # the default for historical reasons apparently.
        "CONN_MAX_AGE": None,
        "CONN_HEALTH_CHECKS": True,
        # New in django 5.1, no need to set pragma separately, yay
        "OPTIONS": {
            "transaction_mode": "IMMEDIATE",
            # Might be redundant with the pragma?
            "timeout": 5,  # seconds
            "init_command": """
                PRAGMA journal_mode = WAL;
                PRAGMA synchronous = NORMAL;
                PRAGMA cache_size = -8000;
                PRAGMA temp_store = MEMORY;
                PRAGMA auto_vacuum = INCREMENTAL;
                PRAGMA foreign_keys = ON;
                PRAGMA busy_timeout = 5000;
            """,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Dev
STATICFILES_DIRS = [
    BASE_DIR / "kitsune" / "static",
]
# Prod? Will just use the same way for now ¯\_(ツ)_/¯
# STATIC_ROOT = BASE_DIR / "kitsune" / "static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging
# https://docs.djangoproject.com/en/5.1/topics/logging/#configuring-logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
        # "celery": {
        #     "level": "WARNING",
        #     "class": "logging.StreamHandler",
        # },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": p_env.DJANGO_LOG_LEVEL,
            "propagate": False,
        },
        "kitsune": {
            "handlers": ["console"],
            "level": p_env.KITSUNE_LOG_LEVEL,
            "propagate": True,
        },
        ###
        # "celery": {
        #     "handlers": ["celery", "console"],
        #     "level": "WARNING",
        #     "propagate": False,
        # },
        ##
    },
}

ASGI_APPLICATION = "kitsune.asgi.application"


# For celery, starts with "CELERY_" and then the uppercase version of those options:
# https://docs.celeryq.dev/en/stable/userguide/configuration.html
# CELERY_TIMEZONE = "Antarctica/Troll"  # https://ssoready.com/blog/engineering/truths-programmers-timezones/
CELERY_BROKER_URL = str(p_env.CELERY_BROKER_URL)
# Default to 4, this is just nicer for testing
CELERY_WORKER_PREFETCH_MULTIPLIER = p_env.CELERY_WORKER_PREFETCH_MULTIPLIER

# TODO: should be able to just use redis for that too
# Use django ORM for results
# https://docs.celeryq.dev/en/stable/django/first-steps-with-django.html#django-celery-results-using-the-django-orm-cache-as-a-result-backend
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"
CELERY_GLOBAL_PREFIX = p_env.CELERY_GLOBAL_PREFIX

# Use django specific scheduler
# CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
